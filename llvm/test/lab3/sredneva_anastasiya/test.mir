# RUN: llc -mtriple x86_64-unknown-linux-gnu --load=%llvmshlibdir/X86SrednevaMulAddIntrinPass%shlibext -run-pass=x86-muladd-intrin-pass  %s -o - | FileCheck %s

# test.cpp 

# __m128d muladd_test1(__m128d a, __m128d b, __m128d c) {
#   __m128d tmp = a * b + c;
#   return tmp;
# }

# __m128d muladd_test2(__m128d a, __m128d b, __m128d c) {
#   __m128d tmp = a * c + b;
#   return tmp;
# }

# __m128d muladd_test3(__m128d a, __m128d b, __m128d c) {
#   __m128d tmp = a * b - c;
#   return tmp;
# }

# __m128d muladd_test4(__m128d a, __m128d b, __m128d c) {
#   __m128d tmp = a * b + c + a;
#   return tmp;
# }

# __m128d muladd_test5(__m128d a, __m128d b, __m128d c) {
#   return a * b + c;
# }

# __m128d muladd_test6(__m128d a, __m128d b, __m128d c) {
#   __m128d tmp = a * b;
#   __m128d tmp2 = b + a - c;
#   return tmp + c + tmp2;
# }

# __m128d muladd_test7(__m128d a, __m128d b, __m128d c) {
#   __m128d tmp = a * b;
#   __m128d tmp2 = tmp + c;
#   return tmp + tmp2;
# }


--- |
  ; ModuleID = 'test.ll'
  source_filename = "test.cpp"

  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"

  ; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none) uwtable
  define dso_local noundef <2 x double> @_Z12muladd_test1Dv2_dS_S_(<2 x double> noundef %a, <2 x double> noundef %b, <2 x double> noundef %c) local_unnamed_addr #0 {
  entry:
    %0 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %a, <2 x double> %b, <2 x double> %c)
    ret <2 x double> %0
  }

  ; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
  declare <2 x double> @llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>) #1

  ; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none) uwtable
  define dso_local noundef <2 x double> @_Z12muladd_test2Dv2_dS_S_(<2 x double> noundef %a, <2 x double> noundef %b, <2 x double> noundef %c) local_unnamed_addr #0 {
  entry:
    %0 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %a, <2 x double> %c, <2 x double> %b)
    ret <2 x double> %0
  }

  ; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none) uwtable
  define dso_local noundef <2 x double> @_Z12muladd_test3Dv2_dS_S_(<2 x double> noundef %a, <2 x double> noundef %b, <2 x double> noundef %c) local_unnamed_addr #0 {
  entry:
    %neg = fneg <2 x double> %c
    %0 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %a, <2 x double> %b, <2 x double> %neg)
    ret <2 x double> %0
  }

  ; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none) uwtable
  define dso_local noundef <2 x double> @_Z12muladd_test4Dv2_dS_S_(<2 x double> noundef %a, <2 x double> noundef %b, <2 x double> noundef %c) local_unnamed_addr #0 {
  entry:
    %0 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %a, <2 x double> %b, <2 x double> %c)
    %add = fadd <2 x double> %0, %a
    ret <2 x double> %add
  }

  ; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none) uwtable
  define dso_local noundef <2 x double> @_Z12muladd_test5Dv2_dS_S_(<2 x double> noundef %a, <2 x double> noundef %b, <2 x double> noundef %c) local_unnamed_addr #0 {
  entry:
    %0 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %a, <2 x double> %b, <2 x double> %c)
    ret <2 x double> %0
  }

  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
  define dso_local noundef <2 x double> @_Z12muladd_test6Dv2_dS_S_(<2 x double> noundef %a, <2 x double> noundef %b, <2 x double> noundef %c) local_unnamed_addr #2 {
  entry:
    %mul = fmul <2 x double> %a, %b
    %add = fadd <2 x double> %a, %b
    %sub = fsub <2 x double> %add, %c
    %add1 = fadd <2 x double> %mul, %c
    %add2 = fadd <2 x double> %add1, %sub
    ret <2 x double> %add2
  }

  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
  define dso_local noundef <2 x double> @_Z12muladd_test7Dv2_dS_S_(<2 x double> noundef %a, <2 x double> noundef %b, <2 x double> noundef %c) local_unnamed_addr #2 {
  entry:
    %mul = fmul <2 x double> %a, %b
    %add = fadd <2 x double> %mul, %c
    %add1 = fadd <2 x double> %mul, %add
    ret <2 x double> %add1
  }

  attributes #0 = { mustprogress nofree nosync nounwind willreturn memory(none) uwtable "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
  attributes #2 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

  !llvm.module.flags = !{!0, !1, !2, !3}

  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}

...
---
name:            _Z12muladd_test1Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $xmm0, $xmm1, $xmm2
  
    renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    RET64 $xmm0

    ; CHECK: $xmm0 = VFMADD213PDr $xmm0, $xmm1, $xmm2, implicit $mxcsr
    ; CHECK-NEXT: RET64 $xmm0

...
---
name:            _Z12muladd_test2Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $xmm0, $xmm1, $xmm2
  
    renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    RET64 $xmm0

    ; CHECK: $xmm0 = VFMADD213PDr $xmm0, $xmm2, $xmm1, implicit $mxcsr
    ; CHECK-NEXT: RET64 $xmm0

...
---
name:            _Z12muladd_test3Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $xmm0, $xmm1, $xmm2
  
    renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    renamable $xmm0 = nofpexcept SUBPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    RET64 $xmm0

    ; CHECK: renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    ; CHECK-NEXT: renamable $xmm0 = nofpexcept SUBPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    ; CHECK-NEXT: RET64 $xmm0

...
---
name:            _Z12muladd_test4Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $xmm0, $xmm1, $xmm2
  
    renamable $xmm1 = nofpexcept MULPDrr killed renamable $xmm1, renamable $xmm0, implicit $mxcsr
    renamable $xmm1 = nofpexcept ADDPDrr killed renamable $xmm1, killed renamable $xmm2, implicit $mxcsr
    renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    RET64 $xmm0

    ; CHECK: $xmm1 = VFMADD213PDr $xmm1, $xmm0, $xmm2, implicit $mxcsr
    ; CHECK-NEXT: renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    ; CHECK-NEXT: RET64 $xmm0

...
---
name:            _Z12muladd_test5Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $xmm0, $xmm1, $xmm2
  
    renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    RET64 $xmm0

    ; CHECK: $xmm0 = VFMADD213PDr $xmm0, $xmm1, $xmm2, implicit $mxcsr
    ; CHECK-NEXT: RET64 $xmm0

...
---
name:            _Z12muladd_test6Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $xmm0, $xmm1, $xmm2
  
    $xmm3 = MOVAPDrr $xmm0
    renamable $xmm3 = nofpexcept MULPDrr killed renamable $xmm3, renamable $xmm1, implicit $mxcsr
    renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    renamable $xmm0 = nofpexcept SUBPDrr killed renamable $xmm0, renamable $xmm2, implicit $mxcsr
    renamable $xmm3 = nofpexcept ADDPDrr killed renamable $xmm3, killed renamable $xmm2, implicit $mxcsr
    renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm3, implicit $mxcsr
    RET64 $xmm0

    ; CHECK: $xmm3 = MOVAPDrr $xmm0
    ; CHECK-NEXT: $xmm3 = VFMADD213PDr $xmm3, $xmm1, $xmm2, implicit $mxcsr
    ; CHECK-NEXT: renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    ; CHECK-NEXT: renamable $xmm0 = nofpexcept SUBPDrr killed renamable $xmm0, renamable $xmm2, implicit $mxcsr
    ; CHECK-NEXT: renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm3, implicit $mxcsr
    ; CHECK-NEXT: RET64 $xmm0
  
...
---
name:            _Z12muladd_test7Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $xmm0, $xmm1, $xmm2
  
    renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    renamable $xmm2 = nofpexcept ADDPDrr killed renamable $xmm2, renamable $xmm0, implicit $mxcsr
    renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    RET64 $xmm0

    ; CHECK: renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    ; CHECK-NEXT: renamable $xmm2 = nofpexcept ADDPDrr killed renamable $xmm2, renamable $xmm0, implicit $mxcsr
    ; CHECK-NEXT: renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    ; CHECK-NEXT: RET64 $xmm0
