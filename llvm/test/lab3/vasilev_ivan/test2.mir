# RUN: llc -mtriple x86_64-unknown-linux-gnu --load=%llvmshlibdir/X86VasilevMulAddPass%shlibext -run-pass=x86-Vasilevmuladd  %s -o - | FileCheck %s

--- |
  ; ModuleID = '/home/adandroll/lab3/llvm-nnsu-2024/llvm/test/lab3/vasilev_ivan/test2.ll'
  source_filename = "/home/adandroll/lab3/llvm-nnsu-2024/llvm/test/lab3/vasilev_ivan/test2.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef <2 x double> @_Z12muladd_test1Dv2_dS_S_(<2 x double> noundef %0, <2 x double> noundef %1, <2 x double> noundef %2) #0 {
    %4 = alloca <2 x double>, align 16
    %5 = alloca <2 x double>, align 16
    %6 = alloca <2 x double>, align 16
    store <2 x double> %0, <2 x double>* %4, align 16
    store <2 x double> %1, <2 x double>* %5, align 16
    store <2 x double> %2, <2 x double>* %6, align 16
    %7 = load <2 x double>, <2 x double>* %4, align 16
    %8 = load <2 x double>, <2 x double>* %5, align 16
    %9 = load <2 x double>, <2 x double>* %6, align 16
    %10 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %7, <2 x double> %8, <2 x double> %9)
    ret <2 x double> %10
  }
  
  ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
  declare <2 x double> @llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>) #1
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef <2 x double> @_Z12muladd_test2Dv2_dS_S_(<2 x double> noundef %0, <2 x double> noundef %1, <2 x double> noundef %2) #0 {
    %4 = alloca <2 x double>, align 16
    %5 = alloca <2 x double>, align 16
    %6 = alloca <2 x double>, align 16
    %7 = alloca <2 x double>, align 16
    store <2 x double> %0, <2 x double>* %4, align 16
    store <2 x double> %1, <2 x double>* %5, align 16
    store <2 x double> %2, <2 x double>* %6, align 16
    %8 = load <2 x double>, <2 x double>* %4, align 16
    %9 = load <2 x double>, <2 x double>* %5, align 16
    %10 = fmul <2 x double> %8, %9
    store <2 x double> %10, <2 x double>* %7, align 16
    %11 = load <2 x double>, <2 x double>* %7, align 16
    %12 = load <2 x double>, <2 x double>* %6, align 16
    %13 = fadd <2 x double> %11, %12
    store <2 x double> %13, <2 x double>* %7, align 16
    %14 = load <2 x double>, <2 x double>* %7, align 16
    ret <2 x double> %14
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef <2 x double> @_Z12muladd_test3Dv2_dS_S_(<2 x double> noundef %0, <2 x double> noundef %1, <2 x double> noundef %2) #0 {
    %4 = alloca <2 x double>, align 16
    %5 = alloca <2 x double>, align 16
    %6 = alloca <2 x double>, align 16
    %7 = alloca <2 x double>, align 16
    store <2 x double> %0, <2 x double>* %4, align 16
    store <2 x double> %1, <2 x double>* %5, align 16
    store <2 x double> %2, <2 x double>* %6, align 16
    %8 = load <2 x double>, <2 x double>* %4, align 16
    %9 = load <2 x double>, <2 x double>* %6, align 16
    %10 = load <2 x double>, <2 x double>* %5, align 16
    %11 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %8, <2 x double> %9, <2 x double> %10)
    store <2 x double> %11, <2 x double>* %7, align 16
    %12 = load <2 x double>, <2 x double>* %7, align 16
    %13 = load <2 x double>, <2 x double>* %6, align 16
    %14 = load <2 x double>, <2 x double>* %5, align 16
    %15 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %12, <2 x double> %13, <2 x double> %14)
    ret <2 x double> %15
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef <2 x double> @_Z12muladd_test4Dv2_dS_S_(<2 x double> noundef %0, <2 x double> noundef %1, <2 x double> noundef %2) #0 {
    %4 = alloca <2 x double>, align 16
    %5 = alloca <2 x double>, align 16
    %6 = alloca <2 x double>, align 16
    %7 = alloca <2 x double>, align 16
    store <2 x double> %0, <2 x double>* %4, align 16
    store <2 x double> %1, <2 x double>* %5, align 16
    store <2 x double> %2, <2 x double>* %6, align 16
    %8 = load <2 x double>, <2 x double>* %4, align 16
    %9 = load <2 x double>, <2 x double>* %6, align 16
    %10 = fmul <2 x double> %8, %9
    store <2 x double> %10, <2 x double>* %7, align 16
    %11 = load <2 x double>, <2 x double>* %7, align 16
    %12 = load <2 x double>, <2 x double>* %5, align 16
    %13 = fdiv <2 x double> %11, %12
    store <2 x double> %13, <2 x double>* %7, align 16
    %14 = load <2 x double>, <2 x double>* %7, align 16
    %15 = load <2 x double>, <2 x double>* %5, align 16
    %16 = fadd <2 x double> %14, %15
    ret <2 x double> %16
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef <2 x double> @_Z12muladd_test5Dv2_dS_S_(<2 x double> noundef %0, <2 x double> noundef %1, <2 x double> noundef %2) #0 {
    %4 = alloca <2 x double>, align 16
    %5 = alloca <2 x double>, align 16
    %6 = alloca <2 x double>, align 16
    %7 = alloca <2 x double>, align 16
    %8 = alloca <2 x double>, align 16
    store <2 x double> %0, <2 x double>* %4, align 16
    store <2 x double> %1, <2 x double>* %5, align 16
    store <2 x double> %2, <2 x double>* %6, align 16
    %9 = load <2 x double>, <2 x double>* %4, align 16
    %10 = load <2 x double>, <2 x double>* %5, align 16
    %11 = fmul <2 x double> %9, %10
    store <2 x double> %11, <2 x double>* %7, align 16
    %12 = load <2 x double>, <2 x double>* %5, align 16
    %13 = load <2 x double>, <2 x double>* %4, align 16
    %14 = fadd <2 x double> %12, %13
    %15 = load <2 x double>, <2 x double>* %6, align 16
    %16 = fsub <2 x double> %14, %15
    store <2 x double> %16, <2 x double>* %8, align 16
    %17 = load <2 x double>, <2 x double>* %7, align 16
    %18 = load <2 x double>, <2 x double>* %6, align 16
    %19 = fadd <2 x double> %17, %18
    %20 = load <2 x double>, <2 x double>* %8, align 16
    %21 = fadd <2 x double> %19, %20
    ret <2 x double> %21
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef <2 x double> @_Z12muladd_test6Dv2_dS_S_(<2 x double> noundef %0, <2 x double> noundef %1, <2 x double> noundef %2) #0 {
    %4 = alloca <2 x double>, align 16
    %5 = alloca <2 x double>, align 16
    %6 = alloca <2 x double>, align 16
    %7 = alloca <2 x double>, align 16
    %8 = alloca <2 x double>, align 16
    store <2 x double> %0, <2 x double>* %4, align 16
    store <2 x double> %1, <2 x double>* %5, align 16
    store <2 x double> %2, <2 x double>* %6, align 16
    %9 = load <2 x double>, <2 x double>* %4, align 16
    %10 = load <2 x double>, <2 x double>* %5, align 16
    %11 = fmul <2 x double> %9, %10
    store <2 x double> %11, <2 x double>* %7, align 16
    %12 = load <2 x double>, <2 x double>* %7, align 16
    %13 = load <2 x double>, <2 x double>* %6, align 16
    %14 = fadd <2 x double> %12, %13
    store <2 x double> %14, <2 x double>* %8, align 16
    %15 = load <2 x double>, <2 x double>* %7, align 16
    %16 = load <2 x double>, <2 x double>* %6, align 16
    %17 = fmul <2 x double> %15, %16
    ret <2 x double> %17
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef <2 x double> @_Z5testXDv2_dS_(<2 x double> noundef %0, <2 x double> noundef %1) #0 {
    %3 = alloca <2 x double>, align 16
    %4 = alloca <2 x double>, align 16
    %5 = alloca <2 x double>, align 16
    store <2 x double> %0, <2 x double>* %3, align 16
    store <2 x double> %1, <2 x double>* %4, align 16
    %6 = load <2 x double>, <2 x double>* %3, align 16
    %7 = load <2 x double>, <2 x double>* %4, align 16
    %8 = fmul <2 x double> %6, %7
    store <2 x double> %8, <2 x double>* %5, align 16
    %9 = load <2 x double>, <2 x double>* %5, align 16
    %10 = load <2 x double>, <2 x double>* %5, align 16
    %11 = fadd <2 x double> %9, %10
    ret <2 x double> %11
  }
  
  attributes #0 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 1}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}

...
---
name:            _Z12muladd_test1Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    16
  maxCallFrameSize: 0
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16 }
stack:
  - { id: 0, offset: -64, size: 16, alignment: 16 }
  - { id: 1, offset: -48, size: 16, alignment: 16 }
  - { id: 2, offset: -32, size: 16, alignment: 16 }
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.3):
    liveins: $xmm0, $xmm1, $xmm2
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 16
    CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    CFI_INSTRUCTION def_cfa_register $rbp
    MOVAPDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.4)
    MOVAPDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm1 :: (store (s128) into %ir.5)
    MOVAPDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm2 :: (store (s128) into %ir.6)
    renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -48, $noreg :: (load (s128) from %ir.4)
    renamable $xmm1 = MOVAPDrm $rbp, 1, $noreg, -32, $noreg :: (load (s128) from %ir.5)
    renamable $xmm2 = MOVAPDrm $rbp, 1, $noreg, -16, $noreg :: (load (s128) from %ir.6)
    ; CHECK: renamable $xmm2 = MOVAPDrm $rbp, 1, $noreg, -16, $noreg :: (load (s128) from %ir.6)
    ; CHECK-NEXT: $xmm0 = VFMADD213PDZ128r $xmm0, $xmm1, $xmm2, implicit $mxcsr
    ; CHECK-NEXT: $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa $rsp, 8
    RET64 implicit $xmm0

...
---
name:            _Z12muladd_test2Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    16
  maxCallFrameSize: 0
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16 }
stack:
  - { id: 0, offset: -80, size: 16, alignment: 16 }
  - { id: 1, offset: -64, size: 16, alignment: 16 }
  - { id: 2, offset: -48, size: 16, alignment: 16 }
  - { id: 3, offset: -32, size: 16, alignment: 16 }
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.3):
    liveins: $xmm0, $xmm1, $xmm2
  
    renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    RET64 $xmm0
    ; CHECK: liveins: $xmm0, $xmm1, $xmm2
    ; CHECK-NOT: renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    ; CHECK-NOT: renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    ; CHECK: $xmm0 = VFMADD213PDZ128r $xmm0, $xmm1, $xmm2, implicit $mxcsr
    ; CHECK-NOT: renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    ; CHECK-NOT: renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    
    ; CHECK-NEXT: RET64 $xmm0

...
---
name:            _Z12muladd_test3Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    16
  maxCallFrameSize: 0
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16 }
stack:
  - { id: 0, offset: -80, size: 16, alignment: 16 }
  - { id: 1, offset: -48, size: 16, alignment: 16 }
  - { id: 2, offset: -32, size: 16, alignment: 16 }
  - { id: 3, offset: -64, size: 16, alignment: 16 }
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.3):
    liveins: $xmm0, $xmm1, $xmm2
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 16
    CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    CFI_INSTRUCTION def_cfa_register $rbp
    MOVAPDmr $rbp, 1, $noreg, -64, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.4)
    MOVAPDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm1 :: (store (s128) into %ir.5)
    MOVAPDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm2 :: (store (s128) into %ir.6)
    renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -64, $noreg :: (load (s128) from %ir.4)
    renamable $xmm1 = MOVAPDrm $rbp, 1, $noreg, -16, $noreg :: (load (s128) from %ir.6)
    renamable $xmm2 = MOVAPDrm $rbp, 1, $noreg, -32, $noreg :: (load (s128) from %ir.5)
    ; CHECK: renamable $xmm2 = MOVAPDrm $rbp, 1, $noreg, -32, $noreg :: (load (s128) from %ir.5)
    ; CHECK-NEXT: $xmm0 = VFMADD213PDZ128r $xmm0, $xmm1, $xmm2, implicit $mxcsr
    ; CHECK-NEXT: MOVAPDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.7)
    renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    MOVAPDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.7)
    renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -48, $noreg :: (load (s128) from %ir.7)
    renamable $xmm1 = MOVAPDrm $rbp, 1, $noreg, -16, $noreg :: (load (s128) from %ir.6)
    renamable $xmm2 = MOVAPDrm $rbp, 1, $noreg, -32, $noreg :: (load (s128) from %ir.5)
    ; CHECK: renamable $xmm2 = MOVAPDrm $rbp, 1, $noreg, -32, $noreg :: (load (s128) from %ir.5)
    ; CHECK-NEXT: $xmm0 = VFMADD213PDZ128r $xmm0, $xmm1, $xmm2, implicit $mxcsr
    ; CHECK-NEXT: $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa $rsp, 8
    RET64 implicit $xmm0

...
---
name:            _Z12muladd_test4Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    16
  maxCallFrameSize: 0
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16 }
stack:
  - { id: 0, offset: -80, size: 16, alignment: 16 }
  - { id: 1, offset: -48, size: 16, alignment: 16 }
  - { id: 2, offset: -64, size: 16, alignment: 16 }
  - { id: 3, offset: -32, size: 16, alignment: 16 }
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.3):
    liveins: $xmm0, $xmm1, $xmm2
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 16
    CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    CFI_INSTRUCTION def_cfa_register $rbp
    ; CHECK: MOVAPDmr $rbp, 1, $noreg, -64, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.4)
    ; CHECK-NEXT: MOVAPDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm1 :: (store (s128) into %ir.5)
    ; CHECK-NEXT: MOVAPDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm2 :: (store (s128) into %ir.6)
    ; CHECK-NEXT: renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -64, $noreg :: (load (s128) from %ir.4)
    ; CHECK-NEXT: renamable $xmm0 = MULPDrm killed renamable $xmm0, $rbp, 1, $noreg, -48, $noreg, implicit $mxcsr :: (load (s128) from %ir.6)
    ; CHECK-NEXT: MOVAPDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.7)
    ; CHECK-NEXT: renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -16, $noreg :: (load (s128) from %ir.7)
    ; CHECK-NEXT: renamable $xmm0 = DIVPDrm killed renamable $xmm0, $rbp, 1, $noreg, -32, $noreg, implicit $mxcsr :: (load (s128) from %ir.5)
    ; CHECK-NEXT: MOVAPDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.7)
    ; CHECK-NEXT: renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -16, $noreg :: (load (s128) from %ir.7)
    ; CHECK-NEXT: renamable $xmm0 = ADDPDrm killed renamable $xmm0, $rbp, 1, $noreg, -32, $noreg, implicit $mxcsr :: (load (s128) from %ir.5)
    MOVAPDmr $rbp, 1, $noreg, -64, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.4)
    MOVAPDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm1 :: (store (s128) into %ir.5)
    MOVAPDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm2 :: (store (s128) into %ir.6)
    renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -64, $noreg :: (load (s128) from %ir.4)
    renamable $xmm0 = MULPDrm killed renamable $xmm0, $rbp, 1, $noreg, -48, $noreg, implicit $mxcsr :: (load (s128) from %ir.6)
    MOVAPDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.7)
    renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -16, $noreg :: (load (s128) from %ir.7)
    renamable $xmm0 = DIVPDrm killed renamable $xmm0, $rbp, 1, $noreg, -32, $noreg, implicit $mxcsr :: (load (s128) from %ir.5)
    MOVAPDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.7)
    renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -16, $noreg :: (load (s128) from %ir.7)
    renamable $xmm0 = ADDPDrm killed renamable $xmm0, $rbp, 1, $noreg, -32, $noreg, implicit $mxcsr :: (load (s128) from %ir.5)
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa $rsp, 8
    RET64 implicit $xmm0

...
---
name:            _Z12muladd_test5Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    16
  maxCallFrameSize: 0
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16 }
stack:
  - { id: 0, offset: -64, size: 16, alignment: 16 }
  - { id: 1, offset: -48, size: 16, alignment: 16 }
  - { id: 2, offset: -32, size: 16, alignment: 16 }
  - { id: 3, offset: -96, size: 16, alignment: 16 }
  - { id: 4, offset: -80, size: 16, alignment: 16 }
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.3):
    liveins: $xmm0, $xmm1, $xmm2
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 16
    CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    CFI_INSTRUCTION def_cfa_register $rbp
    ; CHECK: MOVAPDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.4)
    ; CHECK-NEXT: MOVAPDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm1 :: (store (s128) into %ir.5)
    ; CHECK-NEXT: MOVAPDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm2 :: (store (s128) into %ir.6)
    ; CHECK-NEXT: renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -48, $noreg :: (load (s128) from %ir.4)
    ; CHECK-NEXT: renamable $xmm0 = MULPDrm killed renamable $xmm0, $rbp, 1, $noreg, -32, $noreg, implicit $mxcsr :: (load (s128) from %ir.5)
    ; CHECK-NEXT: MOVAPDmr $rbp, 1, $noreg, -80, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.7)
    ; CHECK-NEXT: renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -32, $noreg :: (load (s128) from %ir.5)
    ; CHECK-NEXT: renamable $xmm0 = ADDPDrm killed renamable $xmm0, $rbp, 1, $noreg, -48, $noreg, implicit $mxcsr :: (load (s128) from %ir.4)
    ; CHECK-NEXT: renamable $xmm0 = SUBPDrm killed renamable $xmm0, $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s128) from %ir.6)
    ; CHECK-NEXT: MOVAPDmr $rbp, 1, $noreg, -64, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.8)
    ; CHECK-NEXT: renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -80, $noreg :: (load (s128) from %ir.7)
    ; CHECK-NEXT: renamable $xmm0 = ADDPDrm killed renamable $xmm0, $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s128) from %ir.6)
    ; CHECK-NEXT: renamable $xmm0 = ADDPDrm killed renamable $xmm0, $rbp, 1, $noreg, -64, $noreg, implicit $mxcsr :: (load (s128) from %ir.8)
    MOVAPDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.4)
    MOVAPDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm1 :: (store (s128) into %ir.5)
    MOVAPDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm2 :: (store (s128) into %ir.6)
    renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -48, $noreg :: (load (s128) from %ir.4)
    renamable $xmm0 = MULPDrm killed renamable $xmm0, $rbp, 1, $noreg, -32, $noreg, implicit $mxcsr :: (load (s128) from %ir.5)
    MOVAPDmr $rbp, 1, $noreg, -80, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.7)
    renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -32, $noreg :: (load (s128) from %ir.5)
    renamable $xmm0 = ADDPDrm killed renamable $xmm0, $rbp, 1, $noreg, -48, $noreg, implicit $mxcsr :: (load (s128) from %ir.4)
    renamable $xmm0 = SUBPDrm killed renamable $xmm0, $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s128) from %ir.6)
    MOVAPDmr $rbp, 1, $noreg, -64, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.8)
    renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -80, $noreg :: (load (s128) from %ir.7)
    renamable $xmm0 = ADDPDrm killed renamable $xmm0, $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s128) from %ir.6)
    renamable $xmm0 = ADDPDrm killed renamable $xmm0, $rbp, 1, $noreg, -64, $noreg, implicit $mxcsr :: (load (s128) from %ir.8)
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa $rsp, 8
    RET64 implicit $xmm0

...
---
name:            _Z12muladd_test6Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    16
  maxCallFrameSize: 0
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16 }
stack:
  - { id: 0, offset: -80, size: 16, alignment: 16 }
  - { id: 1, offset: -64, size: 16, alignment: 16 }
  - { id: 2, offset: -48, size: 16, alignment: 16 }
  - { id: 3, offset: -32, size: 16, alignment: 16 }
  - { id: 4, offset: -96, size: 16, alignment: 16 }
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.3):
    liveins: $xmm0, $xmm1, $xmm2
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 16
    CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    CFI_INSTRUCTION def_cfa_register $rbp
    ; CHECK: MOVAPDmr $rbp, 1, $noreg, -64, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.4)
    ; CHECK-NEXT: MOVAPDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm1 :: (store (s128) into %ir.5)
    ; CHECK-NEXT: MOVAPDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm2 :: (store (s128) into %ir.6)
    ; CHECK-NEXT: renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -64, $noreg :: (load (s128) from %ir.4)
    ; CHECK-NEXT: renamable $xmm0 = MULPDrm killed renamable $xmm0, $rbp, 1, $noreg, -48, $noreg, implicit $mxcsr :: (load (s128) from %ir.5)
    ; CHECK-NEXT: MOVAPDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.7)
    ; CHECK-NEXT: renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -16, $noreg :: (load (s128) from %ir.7)
    ; CHECK-NEXT: renamable $xmm0 = ADDPDrm killed renamable $xmm0, $rbp, 1, $noreg, -32, $noreg, implicit $mxcsr :: (load (s128) from %ir.6)
    ; CHECK-NEXT: MOVAPDmr $rbp, 1, $noreg, -80, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.8)
    ; CHECK-NEXT: renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -16, $noreg :: (load (s128) from %ir.7)
    ; CHECK-NEXT: renamable $xmm0 = MULPDrm killed renamable $xmm0, $rbp, 1, $noreg, -32, $noreg, implicit $mxcsr :: (load (s128) from %ir.6)
    MOVAPDmr $rbp, 1, $noreg, -64, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.4)
    MOVAPDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm1 :: (store (s128) into %ir.5)
    MOVAPDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm2 :: (store (s128) into %ir.6)
    renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -64, $noreg :: (load (s128) from %ir.4)
    renamable $xmm0 = MULPDrm killed renamable $xmm0, $rbp, 1, $noreg, -48, $noreg, implicit $mxcsr :: (load (s128) from %ir.5)
    MOVAPDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.7)
    renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -16, $noreg :: (load (s128) from %ir.7)
    renamable $xmm0 = ADDPDrm killed renamable $xmm0, $rbp, 1, $noreg, -32, $noreg, implicit $mxcsr :: (load (s128) from %ir.6)
    MOVAPDmr $rbp, 1, $noreg, -80, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.8)
    renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -16, $noreg :: (load (s128) from %ir.7)
    renamable $xmm0 = MULPDrm killed renamable $xmm0, $rbp, 1, $noreg, -32, $noreg, implicit $mxcsr :: (load (s128) from %ir.6)
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa $rsp, 8
    RET64 implicit $xmm0

...
---
name:            _Z5testXDv2_dS_
alignment:       16
tracksRegLiveness: true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
frameInfo:
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    16
  maxCallFrameSize: 0
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16 }
stack:
  - { id: 0, offset: -64, size: 16, alignment: 16 }
  - { id: 1, offset: -48, size: 16, alignment: 16 }
  - { id: 2, offset: -32, size: 16, alignment: 16 }
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.2):
    liveins: $xmm0, $xmm1
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 16
    CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    CFI_INSTRUCTION def_cfa_register $rbp
    ; CHECK: MOVAPDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.3)
    ; CHECK-NEXT: MOVAPDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm1 :: (store (s128) into %ir.4)
    ; CHECK-NEXT: renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -48, $noreg :: (load (s128) from %ir.3)
    ; CHECK-NEXT: renamable $xmm0 = MULPDrm killed renamable $xmm0, $rbp, 1, $noreg, -32, $noreg, implicit $mxcsr :: (load (s128) from %ir.4)
    ; CHECK-NEXT: MOVAPDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.5)
    ; CHECK-NEXT: renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -16, $noreg :: (load (s128) from %ir.5)
    ; CHECK-NEXT: renamable $xmm0 = ADDPDrm killed renamable $xmm0, $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s128) from %ir.5)
    MOVAPDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.3)
    MOVAPDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm1 :: (store (s128) into %ir.4)
    renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -48, $noreg :: (load (s128) from %ir.3)
    renamable $xmm0 = MULPDrm killed renamable $xmm0, $rbp, 1, $noreg, -32, $noreg, implicit $mxcsr :: (load (s128) from %ir.4)
    MOVAPDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.5)
    renamable $xmm0 = MOVAPDrm $rbp, 1, $noreg, -16, $noreg :: (load (s128) from %ir.5)
    renamable $xmm0 = ADDPDrm killed renamable $xmm0, $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s128) from %ir.5)
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa $rsp, 8
    RET64 implicit $xmm0

...
