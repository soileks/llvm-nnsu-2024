# RUN: llc -march=x86-64 -simplify-mir --load=%llvmshlibdir/X86KulaevIncremCounterPass%shlibext -run-pass=x86-kulaev-increm-counter-pass %s -o - | FileCheck %s

#  unsigned long ic;

#  void test1(){
#     ic = 0;
#     for (int i = 0; i < 2; i++)
#     {
#        for (int j = 0; j < 2; j++)
#        {
#           int a = i + j;
#        }
#     }
#  }


#  void test2(){
#     int a = 2;
#     int b = 44;
#     for (int i = 0; i < 5; i++)
#     {
#        if (true) {
#           a += b;
#        }else {
#           b += a;
#        }
#     }
# }


--- |
  ; ModuleID = 'test.ll'
  source_filename = "test.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"

  @ic = dso_local global i64 0, align 8

  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local void @_Z5test1v() #0 {
  entry:
    %i = alloca i32, align 4
    %j = alloca i32, align 4
    %a = alloca i32, align 4
    store i64 0, ptr @ic, align 8
    store i32 0, ptr %i, align 4
    br label %for.cond

  for.cond:                                         ; preds = %for.inc4, %entry
    %0 = load i32, ptr %i, align 4
    %cmp = icmp slt i32 %0, 2
    br i1 %cmp, label %for.body, label %for.end6

  for.body:                                         ; preds = %for.cond
    store i32 0, ptr %j, align 4
    br label %for.cond1

  for.cond1:                                        ; preds = %for.inc, %for.body
    %1 = load i32, ptr %j, align 4
    %cmp2 = icmp slt i32 %1, 2
    br i1 %cmp2, label %for.body3, label %for.end

  for.body3:                                        ; preds = %for.cond1
    %2 = load i32, ptr %i, align 4
    %3 = load i32, ptr %j, align 4
    %add = add nsw i32 %2, %3
    store i32 %add, ptr %a, align 4
    br label %for.inc

  for.inc:                                          ; preds = %for.body3
    %4 = load i32, ptr %j, align 4
    %inc = add nsw i32 %4, 1
    store i32 %inc, ptr %j, align 4
    br label %for.cond1, !llvm.loop !6

  for.end:                                          ; preds = %for.cond1
    br label %for.inc4

  for.inc4:                                         ; preds = %for.end
    %5 = load i32, ptr %i, align 4
    %inc5 = add nsw i32 %5, 1
    store i32 %inc5, ptr %i, align 4
    br label %for.cond, !llvm.loop !8

  for.end6:                                         ; preds = %for.cond
    ret void
  }

  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local void @_Z5test2v() #0 {
  entry:
    %a = alloca i32, align 4
    %b = alloca i32, align 4
    %i = alloca i32, align 4
    store i32 2, ptr %a, align 4
    store i32 44, ptr %b, align 4
    store i32 0, ptr %i, align 4
    br label %for.cond

  for.cond:                                         ; preds = %for.inc, %entry
    %0 = load i32, ptr %i, align 4
    %cmp = icmp slt i32 %0, 5
    br i1 %cmp, label %for.body, label %for.end

  for.body:                                         ; preds = %for.cond
    %1 = load i32, ptr %b, align 4
    %2 = load i32, ptr %a, align 4
    %add = add nsw i32 %2, %1
    store i32 %add, ptr %a, align 4
    br label %for.inc

  for.inc:                                          ; preds = %for.body
    %3 = load i32, ptr %i, align 4
    %inc = add nsw i32 %3, 1
    store i32 %inc, ptr %i, align 4
    br label %for.cond, !llvm.loop !9

  for.end:                                          ; preds = %for.cond
    ret void
  }

  attributes #0 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}

  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{!"clang version 17.0.6 (https://github.com/catk1ller007/llvm-nnsu-2024.git 02bf4e00b9b0d1e2a3aaae02489a111d5992ac00)"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.mustprogress"}
  !8 = distinct !{!8, !7}
  !9 = distinct !{!9, !7}

...
---
name:            _Z5test1v
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: i, type: default, offset: -24, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: j, type: default, offset: -20, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: a, type: default, offset: -28, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    MOV64mi32 $noreg, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic)
    MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.i)
    ; CHECK: ADD64ri32 7, &ic, implicit-def $eflags
  
  bb.1.for.cond:
    successors: %bb.8(0x40000000), %bb.2(0x40000000)
  
    CMP32mi $rbp, 1, $noreg, -8, $noreg, 2, implicit-def $eflags :: (load (s32) from %ir.i)
    ; CHECK:      ADD64ri32 2, &ic, implicit-def $eflags
    JCC_1 %bb.8, 13, implicit killed $eflags
  
  bb.2.for.body:
    successors: %bb.3(0x80000000)
  
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.j)
    ; CHECK:      ADD64ri32 1, &ic, implicit-def $eflags
  
  bb.3.for.cond1:
    successors: %bb.6(0x40000000), %bb.4(0x40000000)
  
    CMP32mi $rbp, 1, $noreg, -4, $noreg, 2, implicit-def $eflags :: (load (s32) from %ir.j)
    ; CHECK:      ADD64ri32 2, &ic, implicit-def $eflags
    JCC_1 %bb.6, 13, implicit killed $eflags
  
  bb.4.for.body3:
    successors: %bb.5(0x80000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.i)
    renamable $eax = ADD32rm killed renamable $eax, $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.j)
    MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.a)
    ; CHECK:      ADD64ri32 3, &ic, implicit-def $eflags
  bb.5.for.inc:
    successors: %bb.3(0x80000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.j)
    renamable $eax = ADD32ri killed renamable $eax, 1, implicit-def dead $eflags
    MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.j)
    ; CHECK:      ADD64ri32 4, &ic, implicit-def $eflags
    JMP_1 %bb.3
  
  bb.6.for.end:
    successors: %bb.7(0x80000000)
    ; CHECK:      ADD64ri32 1, &ic, implicit-def $eflags
    JMP_1 %bb.7
  
  bb.7.for.inc4:
    successors: %bb.1(0x80000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.i)
    renamable $eax = ADD32ri killed renamable $eax, 1, implicit-def dead $eflags
    MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.i)
    ; CHECK:      ADD64ri32 4, &ic, implicit-def $eflags
    JMP_1 %bb.1
  
  bb.8.for.end6:
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    ; CHECK:      ADD64ri32 3, &ic, implicit-def $eflags
    RET64
...
---
name:            _Z5test2v
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: a, type: default, offset: -24, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: b, type: default, offset: -28, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: i, type: default, offset: -20, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.a)
    MOV32mi $rbp, 1, $noreg, -12, $noreg, 44 :: (store (s32) into %ir.b)
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.i)
    ; CHECK:      ADD64ri32 8, &ic, implicit-def $eflags
  
  bb.1.for.cond:
    successors: %bb.4(0x40000000), %bb.2(0x40000000)
  
    CMP32mi $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.i)
    ; CHECK:      ADD64ri32 2, &ic, implicit-def $eflags
    JCC_1 %bb.4, 13, implicit killed $eflags
  
  bb.2.for.body:
    successors: %bb.3(0x80000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.b)
    renamable $eax = ADD32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.a)
    MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.a)
    ; CHECK:      ADD64ri32 3, &ic, implicit-def $eflags
  bb.3.for.inc:
    successors: %bb.1(0x80000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.i)
    renamable $eax = ADD32ri killed renamable $eax, 1, implicit-def dead $eflags
    MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.i)
    ; CHECK:      ADD64ri32 4, &ic, implicit-def $eflags
    JMP_1 %bb.1
  
  bb.4.for.end:
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    ; CHECK:      ADD64ri32 3, &ic, implicit-def $eflags
    RET64
...
