# RUN: llc -march=x86-64 -simplify-mir --load=%llvmshlibdir/X86VladimirMICounter%shlibext -run-pass=x86-vladimir-mi-counter %s -o - | FileCheck %s


# COM: // The first empty func test

# void empty_func() {}


# COM: // The second empty function

# unsigned long ic;
# int main_func(int a, int b, int c) {
#   ic = 0;
# 
#   // Function body
#   int d = 0;
#   for (int i = 0; i < a; i++) {
#     if (d < b)
#       d += c;
#   }
#   return d;
# }


# COM: // The third nested loops

# int nested_func(int n) {
#   int res = 0;
#   for (int i = 0; i < n; ++i) {
#     for (int j = 0; j < n; ++j) {
#       res += i;
#       res += j;
#     }
#   }
#   return res;
# }

--- |
  ; ModuleID = '/home/sturmannn/llvm-nnsu-2024/llvm/test/lab3/tmp/test.ll'
  source_filename = "/home/sturmannn/llvm-nnsu-2024/llvm/test/lab3/tmp/test.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"
  
  @ic = dso_local global i64 0, align 8
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local void @_Z10empty_funcv() #0 {
  entry:
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z9main_funciii(i32 noundef %a, i32 noundef %b, i32 noundef %c) #0 {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    %c.addr = alloca i32, align 4
    %d = alloca i32, align 4
    %i = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    store i32 %c, ptr %c.addr, align 4
    store i64 0, ptr @ic, align 8
    store i32 0, ptr %d, align 4
    store i32 0, ptr %i, align 4
    br label %for.cond
  
  for.cond:                                         ; preds = %for.inc, %entry
    %0 = load i32, ptr %i, align 4
    %1 = load i32, ptr %a.addr, align 4
    %cmp = icmp slt i32 %0, %1
    br i1 %cmp, label %for.body, label %for.end
  
  for.body:                                         ; preds = %for.cond
    %2 = load i32, ptr %d, align 4
    %3 = load i32, ptr %b.addr, align 4
    %cmp1 = icmp slt i32 %2, %3
    br i1 %cmp1, label %if.then, label %if.end
  
  if.then:                                          ; preds = %for.body
    %4 = load i32, ptr %c.addr, align 4
    %5 = load i32, ptr %d, align 4
    %add = add nsw i32 %5, %4
    store i32 %add, ptr %d, align 4
    br label %if.end
  
  if.end:                                           ; preds = %if.then, %for.body
    br label %for.inc
  
  for.inc:                                          ; preds = %if.end
    %6 = load i32, ptr %i, align 4
    %inc = add nsw i32 %6, 1
    store i32 %inc, ptr %i, align 4
    br label %for.cond, !llvm.loop !6
  
  for.end:                                          ; preds = %for.cond
    %7 = load i32, ptr %d, align 4
    ret i32 %7
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z11nested_funci(i32 noundef %n) #0 {
  entry:
    %n.addr = alloca i32, align 4
    %res = alloca i32, align 4
    %i = alloca i32, align 4
    %j = alloca i32, align 4
    store i32 %n, ptr %n.addr, align 4
    store i32 0, ptr %res, align 4
    store i32 0, ptr %i, align 4
    br label %for.cond
  
  for.cond:                                         ; preds = %for.inc5, %entry
    %0 = load i32, ptr %i, align 4
    %1 = load i32, ptr %n.addr, align 4
    %cmp = icmp slt i32 %0, %1
    br i1 %cmp, label %for.body, label %for.end7
  
  for.body:                                         ; preds = %for.cond
    store i32 0, ptr %j, align 4
    br label %for.cond1
  
  for.cond1:                                        ; preds = %for.inc, %for.body
    %2 = load i32, ptr %j, align 4
    %3 = load i32, ptr %n.addr, align 4
    %cmp2 = icmp slt i32 %2, %3
    br i1 %cmp2, label %for.body3, label %for.end
  
  for.body3:                                        ; preds = %for.cond1
    %4 = load i32, ptr %i, align 4
    %5 = load i32, ptr %res, align 4
    %add = add nsw i32 %5, %4
    store i32 %add, ptr %res, align 4
    %6 = load i32, ptr %j, align 4
    %7 = load i32, ptr %res, align 4
    %add4 = add nsw i32 %7, %6
    store i32 %add4, ptr %res, align 4
    br label %for.inc
  
  for.inc:                                          ; preds = %for.body3
    %8 = load i32, ptr %j, align 4
    %inc = add nsw i32 %8, 1
    store i32 %inc, ptr %j, align 4
    br label %for.cond1, !llvm.loop !8
  
  for.end:                                          ; preds = %for.cond1
    br label %for.inc5
  
  for.inc5:                                         ; preds = %for.end
    %9 = load i32, ptr %i, align 4
    %inc6 = add nsw i32 %9, 1
    store i32 %inc6, ptr %i, align 4
    br label %for.cond, !llvm.loop !9
  
  for.end7:                                         ; preds = %for.cond
    %10 = load i32, ptr %res, align 4
    ret i32 %10
  }
  
  attributes #0 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{!"clang version 17.0.6 (https://github.com/Sturmannn/llvm-nnsu-2024.git 45fa684ae500720b84b7f2a1c946dbffbc80d514)"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.mustprogress"}
  !8 = distinct !{!8, !7}
  !9 = distinct !{!9, !7}

...
---
name:            _Z10empty_funcv
alignment:       16
tracksRegLiveness: true
# CHECK: registers:
# CHECK-NEXT:   - { id: 0, class: gr64 }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    ; CHECK: %0:gr64 = ADD64ri32 %0, 1, implicit-def $eflags
    ; CHECK-NEXT: MOV64mr %0, @ic
    RET64

...
---
name:            _Z9main_funciii
alignment:       16
tracksRegLiveness: true
registers:
  - { id: 0, class: gr32 }
  - { id: 1, class: gr32 }
  - { id: 2, class: gr32 }
  - { id: 3, class: gr32 }
  - { id: 4, class: gr32 }
  - { id: 5, class: gr32 }
  - { id: 6, class: gr32 }
  - { id: 7, class: gr32 }
  - { id: 8, class: gr32 }
  - { id: 9, class: gr32 }
  - { id: 10, class: gr32 }
  - { id: 11, class: gr32 }
  - { id: 12, class: gr32 }
  - { id: 13, class: gr32 }
  - { id: 14, class: gr32 }
  - { id: 15, class: gr32 }
  - { id: 16, class: gr32 }
  - { id: 17, class: gr32 }
  - { id: 18, class: gr32 }
  - { id: 19, class: gr32 }
  - { id: 20, class: gr32 }
  - { id: 21, class: gr32 }
  - { id: 22, class: gr32 }
# CHECK: - { id: 23, class: gr64 }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%2' }
  - { reg: '$edx', virtual-reg: '%4' }
frameInfo:
  maxAlignment:    4
stack:
  - { id: 0, name: a.addr, size: 4, alignment: 4 }
  - { id: 1, name: b.addr, size: 4, alignment: 4 }
  - { id: 2, name: c.addr, size: 4, alignment: 4 }
  - { id: 3, name: d, size: 4, alignment: 4 }
  - { id: 4, name: i, size: 4, alignment: 4 }
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $edi, $esi, $edx
  
    %4:gr32 = COPY $edx
    %2:gr32 = COPY $esi
    %0:gr32 = COPY $edi
    %1:gr32 = COPY killed %0
    %3:gr32 = COPY killed %2
    %5:gr32 = COPY killed %4
    MOV32mr %stack.0.a.addr, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.a.addr)
    MOV32mr %stack.1.b.addr, 1, $noreg, 0, $noreg, %3 :: (store (s32) into %ir.b.addr)
    MOV32mr %stack.2.c.addr, 1, $noreg, 0, $noreg, %5 :: (store (s32) into %ir.c.addr)
    MOV64mi32 $noreg, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic)
    MOV32mi %stack.3.d, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.d)
    MOV32mi %stack.4.i, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.i)
    ; CHECK: %23:gr64 = ADD64ri32 %23, 12, implicit-def $eflags
  
  bb.1.for.cond:
    %8:gr32 = MOV32rm %stack.4.i, 1, $noreg, 0, $noreg :: (load (s32) from %ir.i)
    CMP32rm %8, %stack.0.a.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.a.addr)
    ; CHECK: %23:gr64 = ADD64ri32 %23, 3, implicit-def $eflags
    ; CHECK-NEXT: MOV64mr %23, @ic
    JCC_1 %bb.6, 13, implicit $eflags
  
  bb.2.for.body:
    %13:gr32 = MOV32rm %stack.3.d, 1, $noreg, 0, $noreg :: (load (s32) from %ir.d)
    CMP32rm %13, %stack.1.b.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.b.addr)
    ; CHECK: %23:gr64 = ADD64ri32 %23, 3, implicit-def $eflags
    ; CHECK-NEXT: MOV64mr %23, @ic
    JCC_1 %bb.4, 13, implicit $eflags
  
  bb.3.if.then:
    %18:gr32 = MOV32rm %stack.2.c.addr, 1, $noreg, 0, $noreg :: (load (s32) from %ir.c.addr)
    %17:gr32 = ADD32rm %18, %stack.3.d, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.d)
    MOV32mr %stack.3.d, 1, $noreg, 0, $noreg, %17 :: (store (s32) into %ir.d)
    ; CHECK: %23:gr64 = ADD64ri32 %23, 3, implicit-def $eflags

  bb.4.if.end:
    ; CHECK: %23:gr64 = ADD64ri32 %23, 1, implicit-def $eflags
    ; CHECK-NEXT: MOV64mr %23, @ic
    JMP_1 %bb.5
  
  bb.5.for.inc:
    %22:gr32 = MOV32rm %stack.4.i, 1, $noreg, 0, $noreg :: (load (s32) from %ir.i)
    %21:gr32 = ADD32ri %22, 1, implicit-def $eflags
    MOV32mr %stack.4.i, 1, $noreg, 0, $noreg, %21 :: (store (s32) into %ir.i)
    ; CHECK: %23:gr64 = ADD64ri32 %23, 4, implicit-def $eflags
    ; CHECK-NEXT: MOV64mr %23, @ic
    JMP_1 %bb.1
  
  bb.6.for.end:
    %10:gr32 = MOV32rm %stack.3.d, 1, $noreg, 0, $noreg :: (load (s32) from %ir.d)
    $eax = COPY %10
    ; CHECK: %23:gr64 = ADD64ri32 %23, 3, implicit-def $eflags
    ; CHECK-NEXT: MOV64mr %23, @ic
    RET64 implicit $eax

...
---
name:            _Z11nested_funci
alignment:       16
tracksRegLiveness: true
registers:
  - { id: 0, class: gr32 }
  - { id: 1, class: gr32 }
  - { id: 2, class: gr32 }
  - { id: 3, class: gr32 }
  - { id: 4, class: gr32 }
  - { id: 5, class: gr32 }
  - { id: 6, class: gr32 }
  - { id: 7, class: gr32 }
  - { id: 8, class: gr32 }
  - { id: 9, class: gr32 }
  - { id: 10, class: gr32 }
  - { id: 11, class: gr32 }
  - { id: 12, class: gr32 }
  - { id: 13, class: gr32 }
  - { id: 14, class: gr32 }
  - { id: 15, class: gr32 }
  - { id: 16, class: gr32 }
  - { id: 17, class: gr32 }
  - { id: 18, class: gr32 }
  - { id: 19, class: gr32 }
  - { id: 20, class: gr32 }
  - { id: 21, class: gr32 }
  - { id: 22, class: gr32 }
  - { id: 23, class: gr32 }
  - { id: 24, class: gr32 }
  - { id: 25, class: gr32 }
  - { id: 26, class: gr32 }
  - { id: 27, class: gr32 }
  # CHECK: - { id: 28, class: gr64 }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
frameInfo:
  maxAlignment:    4
stack:
  - { id: 0, name: n.addr, size: 4, alignment: 4 }
  - { id: 1, name: res, size: 4, alignment: 4 }
  - { id: 2, name: i, size: 4, alignment: 4 }
  - { id: 3, name: j, size: 4, alignment: 4 }
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $edi
  
    %0:gr32 = COPY $edi
    %1:gr32 = COPY killed %0
    MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.n.addr)
    MOV32mi %stack.1.res, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.res)
    MOV32mi %stack.2.i, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.i)
    ; CHECK: %28:gr64 = ADD64ri32 %28, 5, implicit-def $eflags
  
  bb.1.for.cond:
    %4:gr32 = MOV32rm %stack.2.i, 1, $noreg, 0, $noreg :: (load (s32) from %ir.i)
    CMP32rm %4, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.n.addr)
    ; CHECK: %28:gr64 = ADD64ri32 %28, 3, implicit-def $eflags
    ; CHECK: MOV64mr %28, @ic
    JCC_1 %bb.8, 13, implicit $eflags
  
  bb.2.for.body:
    MOV32mi %stack.3.j, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.j)
    ; CHECK: %28:gr64 = ADD64ri32 %28, 1, implicit-def $eflags
  
  bb.3.for.cond1:
    %9:gr32 = MOV32rm %stack.3.j, 1, $noreg, 0, $noreg :: (load (s32) from %ir.j)
    CMP32rm %9, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.n.addr)
    ; CHECK: %28:gr64 = ADD64ri32 %28, 3, implicit-def $eflags
    ; CHECK-NEXT: MOV64mr %28, @ic
    JCC_1 %bb.6, 13, implicit $eflags
  
  bb.4.for.body3:
    %23:gr32 = MOV32rm %stack.2.i, 1, $noreg, 0, $noreg :: (load (s32) from %ir.i)
    %22:gr32 = ADD32rm %23, %stack.1.res, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.res)
    MOV32mr %stack.1.res, 1, $noreg, 0, $noreg, %22 :: (store (s32) into %ir.res)
    %18:gr32 = MOV32rm %stack.3.j, 1, $noreg, 0, $noreg :: (load (s32) from %ir.j)
    %17:gr32 = ADD32rm %18, %stack.1.res, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.res)
    MOV32mr %stack.1.res, 1, $noreg, 0, $noreg, %17 :: (store (s32) into %ir.res)
    ; CHECK: %28:gr64 = ADD64ri32 %28, 6, implicit-def $eflags
  
  bb.5.for.inc:
    %27:gr32 = MOV32rm %stack.3.j, 1, $noreg, 0, $noreg :: (load (s32) from %ir.j)
    %26:gr32 = ADD32ri %27, 1, implicit-def $eflags
    MOV32mr %stack.3.j, 1, $noreg, 0, $noreg, %26 :: (store (s32) into %ir.j)
    ; CHECK: %28:gr64 = ADD64ri32 %28, 4, implicit-def $eflags
    ; CHECK-NEXT: MOV64mr %28, @ic
    JMP_1 %bb.3
  
  bb.6.for.end:
    ; CHECK: %28:gr64 = ADD64ri32 %28, 1, implicit-def $eflags
    ; CHECK-NEXT: MOV64mr %28, @ic
    JMP_1 %bb.7
  
  bb.7.for.inc5:
    %13:gr32 = MOV32rm %stack.2.i, 1, $noreg, 0, $noreg :: (load (s32) from %ir.i)
    %12:gr32 = ADD32ri %13, 1, implicit-def $eflags
    MOV32mr %stack.2.i, 1, $noreg, 0, $noreg, %12 :: (store (s32) into %ir.i)
    ; CHECK: %28:gr64 = ADD64ri32 %28, 4, implicit-def $eflags
    ; CHECK-NEXT: MOV64mr %28, @ic
    JMP_1 %bb.1
  
  bb.8.for.end7:
    %6:gr32 = MOV32rm %stack.1.res, 1, $noreg, 0, $noreg :: (load (s32) from %ir.res)
    $eax = COPY %6
    ; CHECK: %28:gr64 = ADD64ri32 %28, 3, implicit-def $eflags
    ; CHECK-NEXT: MOV64mr %28, @ic
    RET64 implicit $eax

...
