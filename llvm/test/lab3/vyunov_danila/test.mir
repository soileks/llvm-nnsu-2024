#RUN: llc -march=x86-64 --load=%llvmshlibdir/X86VyunovInstCounter%shlibext -run-pass=x86-vyunov-inst-cnt %s -o - | FileCheck %s

# source.cpp
#
# unsigned long ic;
#
# int func(int a, int b, int c) {
#    ic = 0;
#
#   // Function body
#   int d = 0;
#   for (int i = 0; i < a; i++) {
#       if (d < b)
#           d += c;
#   }
#   return d;
# }
# void func1(){
#   int a = 2;
#   int b = 3;
#   int c = a + b + 2;
#   int res = c * 10;
# }
#
# int func2() {
#    int c = 2;
#    int a = c + 2;
#    return a * 2 + c / 2;
# }
#
# double func3(double a, double b) {
#    double res = a * 3.5;
#    res /= res * b / 5.45;
#    return res + 10;
# }
#
# int func4(int x, int y) {
#    ic = 0;
#    int a;
#    if (x > y) {
#        a = 5;
#    }
#    else {
#        a = 2;
#    }
#    return a;
#}
#
# void func() {}
#
# int main() {
#    return 0;
# }

# clang++ -S -emit-llvm -g0 -o source.ll source.cpp
# llc -march=x86-64 source.ll -stop-after=x86-isel -o source.mir

--- |
  ; ModuleID = '../../source.ll'
  source_filename = "../../source.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"

  @ic = dso_local global i64 0, align 8

  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z4funciii(i32 noundef %0, i32 noundef %1, i32 noundef %2) #0 {
    %4 = alloca i32, align 4
    %5 = alloca i32, align 4
    %6 = alloca i32, align 4
    %7 = alloca i32, align 4
    %8 = alloca i32, align 4
    store i32 %0, ptr %4, align 4
    store i32 %1, ptr %5, align 4
    store i32 %2, ptr %6, align 4
    store i64 0, ptr @ic, align 8
    store i32 0, ptr %7, align 4
    store i32 0, ptr %8, align 4
    br label %9

  9:                                                ; preds = %22, %3
    %10 = load i32, ptr %8, align 4
    %11 = load i32, ptr %4, align 4
    %12 = icmp slt i32 %10, %11
    br i1 %12, label %13, label %25

  13:                                               ; preds = %9
    %14 = load i32, ptr %7, align 4
    %15 = load i32, ptr %5, align 4
    %16 = icmp slt i32 %14, %15
    br i1 %16, label %17, label %21

  17:                                               ; preds = %13
    %18 = load i32, ptr %6, align 4
    %19 = load i32, ptr %7, align 4
    %20 = add nsw i32 %19, %18
    store i32 %20, ptr %7, align 4
    br label %21

  21:                                               ; preds = %17, %13
    br label %22

  22:                                               ; preds = %21
    %23 = load i32, ptr %8, align 4
    %24 = add nsw i32 %23, 1
    store i32 %24, ptr %8, align 4
    br label %9, !llvm.loop !6

  25:                                               ; preds = %9
    %26 = load i32, ptr %7, align 4
    ret i32 %26
  }

  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local void @_Z5func1v() #0 {
    %1 = alloca i32, align 4
    %2 = alloca i32, align 4
    %3 = alloca i32, align 4
    %4 = alloca i32, align 4
    store i64 0, ptr @ic, align 8
    store i32 2, ptr %1, align 4
    store i32 3, ptr %2, align 4
    %5 = load i32, ptr %1, align 4
    %6 = load i32, ptr %2, align 4
    %7 = add nsw i32 %5, %6
    %8 = add nsw i32 %7, 2
    store i32 %8, ptr %3, align 4
    %9 = load i32, ptr %3, align 4
    %10 = mul nsw i32 %9, 10
    store i32 %10, ptr %4, align 4
    ret void
  }

  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z5func2v() #0 {
    %1 = alloca i32, align 4
    %2 = alloca i32, align 4
    store i64 0, ptr @ic, align 8
    store i32 2, ptr %1, align 4
    %3 = load i32, ptr %1, align 4
    %4 = add nsw i32 %3, 2
    store i32 %4, ptr %2, align 4
    %5 = load i32, ptr %2, align 4
    %6 = mul nsw i32 %5, 2
    %7 = load i32, ptr %1, align 4
    %8 = sdiv i32 %7, 2
    %9 = add nsw i32 %6, %8
    ret i32 %9
  }

  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef double @_Z5func3dd(double noundef %0, double noundef %1) #0 {
    %3 = alloca double, align 8
    %4 = alloca double, align 8
    %5 = alloca double, align 8
    store double %0, ptr %3, align 8
    store double %1, ptr %4, align 8
    store i64 0, ptr @ic, align 8
    %6 = load double, ptr %3, align 8
    %7 = fmul double %6, 3.500000e+00
    store double %7, ptr %5, align 8
    %8 = load double, ptr %5, align 8
    %9 = load double, ptr %4, align 8
    %10 = fmul double %8, %9
    %11 = fdiv double %10, 5.450000e+00
    %12 = load double, ptr %5, align 8
    %13 = fdiv double %12, %11
    store double %13, ptr %5, align 8
    %14 = load double, ptr %5, align 8
    %15 = fadd double %14, 1.000000e+01
    ret double %15
  }

  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z5func4ii(i32 noundef %0, i32 noundef %1) #0 {
    %3 = alloca i32, align 4
    %4 = alloca i32, align 4
    %5 = alloca i32, align 4
    store i32 %0, ptr %3, align 4
    store i32 %1, ptr %4, align 4
    store i64 0, ptr @ic, align 8
    %6 = load i32, ptr %3, align 4
    %7 = load i32, ptr %4, align 4
    %8 = icmp sgt i32 %6, %7
    br i1 %8, label %9, label %10

  9:                                                ; preds = %2
    store i32 5, ptr %5, align 4
    br label %11

  10:                                               ; preds = %2
    store i32 2, ptr %5, align 4
    br label %11

  11:                                               ; preds = %10, %9
    %12 = load i32, ptr %5, align 4
    ret i32 %12
  }

  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local void @_Z4funcv() #0 {
    ret void
  }

  ; Function Attrs: mustprogress noinline norecurse nounwind optnone uwtable
  define dso_local noundef i32 @main() #1 {
    %1 = alloca i32, align 4
    store i32 0, ptr %1, align 4
    ret i32 0
  }

  attributes #0 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { mustprogress noinline norecurse nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}

  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{!"clang version 17.0.6 (git@github.com:un1i/llvm-nnsu-2024.git 353b5fc85b6296ec191870a98df4c5b2c4882400)"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.mustprogress"}

...
---
name:            _Z4funciii
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
  - { id: 17, class: gr32, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr32, preferred-register: '' }
  - { id: 20, class: gr32, preferred-register: '' }
  - { id: 21, class: gr32, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%2' }
  - { reg: '$edx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.3):
    successors: %bb.1(0x80000000)
    liveins: $edi, $esi, $edx
    %4:gr32 = COPY $edx
    %2:gr32 = COPY $esi
    %0:gr32 = COPY $edi
    %1:gr32 = COPY killed %0
    %3:gr32 = COPY killed %2
    %5:gr32 = COPY killed %4
    MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.4)
    MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s32) into %ir.5)
    MOV32mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s32) into %ir.6)
    MOV64mi32 $noreg, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic)
    MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.7)
    MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.8)
    ; CHECK: MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.7)
    ; CHECK-NEXT: MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.8)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 12, implicit-def $eflags
  bb.1 (%ir-block.9):
    successors: %bb.6(0x40000000), %bb.2(0x40000000)
    %8:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.8)
    CMP32rm %8, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
    JCC_1 %bb.6, 13, implicit $eflags
    ; CHECK: %8:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.8)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 3, implicit-def $eflags
    ; CHECK-NEXT: CMP32rm %8, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  bb.2 (%ir-block.13):
    successors: %bb.4(0x40000000), %bb.3(0x40000000)
    %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.7)
    CMP32rm %13, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
    JCC_1 %bb.4, 13, implicit $eflags
    ; CHECK: %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.7)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 3, implicit-def $eflags
    ; CHECK-NEXT: CMP32rm %13, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
  bb.3 (%ir-block.17):
    successors: %bb.4(0x80000000)
    %18:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.6)
    %17:gr32 = ADD32rm %18, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.7)
    MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17 :: (store (s32) into %ir.7)
    ; CHECK: %17:gr32 = ADD32rm %18, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.7)
    ; CHECK-NEXT: MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17 :: (store (s32) into %ir.7)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 3, implicit-def $eflags
  bb.4 (%ir-block.21):
    successors: %bb.5(0x80000000)
    JMP_1 %bb.5
    ; CHECK: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 1, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.5
  bb.5 (%ir-block.22):
    successors: %bb.1(0x80000000)
    %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.8)
    %21:gr32 = ADD32ri %22, 1, implicit-def $eflags
    MOV32mr %stack.4, 1, $noreg, 0, $noreg, %21 :: (store (s32) into %ir.8)
    JMP_1 %bb.1
    ; CHECK: MOV32mr %stack.4, 1, $noreg, 0, $noreg, %21 :: (store (s32) into %ir.8)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 4, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.1
  bb.6 (%ir-block.25):
    %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.7)
    $eax = COPY %10
    RET64 implicit $eax
    ; CHECK: $eax = COPY %10
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 3, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $eax
...
---
name:            _Z5func1v
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    MOV64mi32 $noreg, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic)
    MOV32mi %stack.0, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.1)
    MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
    %9:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
    %8:gr32 = ADD32rm %9, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
    %5:gr32 = ADD32ri %8, 2, implicit-def $eflags
    MOV32mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s32) into %ir.3)
    %2:gr32 = IMUL32rmi %stack.2, 1, $noreg, 0, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.3)
    MOV32mr %stack.3, 1, $noreg, 0, $noreg, %2 :: (store (s32) into %ir.4)
    RET64
    ; CHECK: MOV32mr %stack.3, 1, $noreg, 0, $noreg, %2 :: (store (s32) into %ir.4)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 10, implicit-def $eflags
    ; CHECK: RET64
...
---
name:            _Z5func2v
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    MOV64mi32 $noreg, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic)
    MOV32mi %stack.0, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.1)
    %15:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
    %14:gr32 = ADD32ri %15, 2, implicit-def $eflags
    MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14 :: (store (s32) into %ir.2)
    %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
    %10:gr32 = SHL32ri %11, 1, implicit-def $eflags
    %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
    %6:gr32 = MOV32ri 2
    $eax = COPY %8
    CDQ implicit-def $eax, implicit-def $edx, implicit $eax
    IDIV32r %6, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
    %7:gr32 = COPY $eax
    %3:gr32 = ADD32rr %10, %7, implicit-def $eflags
    $eax = COPY %3
    RET64 implicit $eax
    ; CHECK: $eax = COPY %3
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 16, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $eax
...
---
name:            _Z5func3dd
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: fr64, preferred-register: '' }
  - { id: 1, class: fr64, preferred-register: '' }
  - { id: 2, class: fr64, preferred-register: '' }
  - { id: 3, class: fr64, preferred-register: '' }
  - { id: 4, class: fr64, preferred-register: '' }
  - { id: 5, class: fr64, preferred-register: '' }
  - { id: 6, class: fr64, preferred-register: '' }
  - { id: 7, class: fr64, preferred-register: '' }
  - { id: 8, class: fr64, preferred-register: '' }
  - { id: 9, class: fr64, preferred-register: '' }
  - { id: 10, class: fr64, preferred-register: '' }
  - { id: 11, class: fr64, preferred-register: '' }
  - { id: 12, class: fr64, preferred-register: '' }
  - { id: 13, class: fr64, preferred-register: '' }
  - { id: 14, class: fr64, preferred-register: '' }
  - { id: 15, class: fr64, preferred-register: '' }
  - { id: 16, class: fr64, preferred-register: '' }
  - { id: 17, class: fr64, preferred-register: '' }
  - { id: 18, class: fr64, preferred-register: '' }
  - { id: 19, class: fr64, preferred-register: '' }
  - { id: 20, class: fr64, preferred-register: '' }
  - { id: 21, class: fr64, preferred-register: '' }
  - { id: 22, class: fr64, preferred-register: '' }
  - { id: 23, class: fr64, preferred-register: '' }
liveins:
  - { reg: '$xmm0', virtual-reg: '%0' }
  - { reg: '$xmm1', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:
  - id:              0
    value:           'double 1.000000e+01'
    alignment:       8
    isTargetSpecific: false
  - id:              1
    value:           'double 5.450000e+00'
    alignment:       8
    isTargetSpecific: false
  - id:              2
    value:           'double 3.500000e+00'
    alignment:       8
    isTargetSpecific: false
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.2):
    liveins: $xmm0, $xmm1
    %2:fr64 = COPY $xmm1
    %0:fr64 = COPY $xmm0
    %1:fr64 = COPY killed %0
    %3:fr64 = COPY killed %2
    MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mi32 $noreg, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic)
    %22:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
    %23:fr64 = MULSDrm %22, %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.3)
    MOVSDmr %stack.2, 1, $noreg, 0, $noreg, %23 :: (store (s64) into %ir.5)
    %19:fr64 = MOVSDrm_alt %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %18:fr64 = MULSDrm %19, %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.4)
    %14:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
    %15:fr64 = DIVSDrr %18, %14, implicit $mxcsr
    %12:fr64 = MOVSDrm_alt %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %11:fr64 = DIVSDrr %12, %15, implicit $mxcsr
    MOVSDmr %stack.2, 1, $noreg, 0, $noreg, %11 :: (store (s64) into %ir.5)
    %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
    %7:fr64 = ADDSDrm %6, %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.5)
    $xmm0 = COPY %7
    RET64 implicit $xmm0
    ; CHECK: $xmm0 = COPY %7
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 21, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $xmm0
...
---
name:            _Z5func4ii
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.2):
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $edi, $esi
    %2:gr32 = COPY $esi
    %0:gr32 = COPY $edi
    %1:gr32 = COPY killed %0
    %3:gr32 = COPY killed %2
    MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.3)
    MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s32) into %ir.4)
    MOV64mi32 $noreg, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic)
    %6:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
    CMP32rm %6, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
    JCC_1 %bb.2, 14, implicit $eflags
    ; CHECK: %6:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 10, implicit-def $eflags
    ; CHECK-NEXT: CMP32rm %6, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  bb.1 (%ir-block.9):
    successors: %bb.3(0x80000000)
    MOV32mi %stack.2, 1, $noreg, 0, $noreg, 5 :: (store (s32) into %ir.5)
    JMP_1 %bb.3
    ; CHECK: MOV32mi %stack.2, 1, $noreg, 0, $noreg, 5 :: (store (s32) into %ir.5)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 2, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.3
  bb.2 (%ir-block.10):
    successors: %bb.3(0x80000000)
    MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.5)
    ; CHECK: MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.5)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 1, implicit-def $eflags
  bb.3 (%ir-block.11):
    %8:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
    $eax = COPY %8
    RET64 implicit $eax
    ; CHECK: $eax = COPY %8
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 3, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $eax
...
---
name:            _Z4funcv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    RET64
    ; CHECK: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 1, implicit-def $eflags
    ; CHECK-NEXT: RET64
...
---
name:            main
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
    %0:gr32 = MOV32r0 implicit-def $eflags
    $eax = COPY %0
    RET64 implicit $eax
    ; CHECK: $eax = COPY %0
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 4, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $eax
...
